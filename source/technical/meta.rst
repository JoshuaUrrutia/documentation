.. _meta:

=====
Meta
=====
Meta V3 is a REST API Microservice for MongoDB which provides server-side Data, Identity and Access Management for Web and Mobile applications.

-----------------
Overview
-----------------
Meta V3 is:

A Stateless Microservice.
With Meta V3 projects can focus on building Angular or other frontend applications, because most of the server-side
logic necessary to manage database operations, authentication / authorization and related APIs is automatically handled,
without the need to write any server-side code except for the UX/UI.

For example, to insert data into MongoDB a developer has to just create client-side JSON documents and then execute POST operations via HTTP to Meta V3.
Other functions of a modern MongoDB installation like flexible schema, geoJson and aggregation pipelines ease the development process.

Every tenant will have access to at least one database where they can store and manage json documents. Documents are the trailing end
of a nested hierarchy of data that begins with a database that houses one or more collections. The collections house json documents
the structure of which is left up to the administrators of the tenant database.

Permissions for access to databases, collections and documents must be predefined before accessing those resources. The definitions
for access are defined within the Security Kernel API of Tapis V3 and must be added by a tenant or service administrator.
See the Permissions section below for some examples of permissions definitions and access to resources in the Meta V3 API.

--------------------------------
Getting Started
--------------------------------

Create a document
-----------------
We have a database named MyTstDB and a collection name MyCollection. To add a json document to MyCollection, we can do the following:


With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" --data '{"name": "test document slt 7.21.2020-14:27","jimmyList": ["1","3"],"description": "new whatever",}'  $BASE_URL/v3/meta/MyTstDB/MyCollection?basic=true

The response will have an empty response body with a status code of 201 "Created" unless the "basic" url query parameter is set to true.
Setting the "basic" parameter to true will give a Tapis Basic response along with the "_id" of the newly created document. A more detailed discussion
of autogenerated ids and specified ids can be found in the "Create Document" section of "Document Resources".

.. container:: foldable

     .. code-block:: json

        {
          "result": {
            "_id": "5f189316e37f7b5a692285f3"
          },
          "status": "201",
          "message": "Created",
          "version": "0.0.1"
        }


List documents
---------------
Using our MyTstDb/MyCollection resources we can ask for a default list of documents in MongoDB default sorted order. The document we created earlier
should be listed with a new "_id" field that was autogenerated by MongoDB.

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" $BASE_URL/v3/meta/MyTstDB/MyCollection

The response will be an array of json documents from MyCollection :

.. container:: foldable

     .. code-block:: json

        [
          {
            "_id": {
              "$oid": "5f189316e37f7b5a692285f3"
            },
            "name": "test document slt 7.21.2020-14:27",
            "jimmyList": [
              "1",
              "3"
            ],
            "description": "new whatever",
            "_etag": {
              "$oid": "5f189316296c81742a6a3e4c"
            }
          },
          {
            "_id": {
              "$oid": "5f1892ece37f7b5a692285e9"
            },
            "name": "test document slt 7.21.2020-14:25",
            "jimmyList": [
              "1",
              "3"
            ],
            "description": "new whatever",
            "_etag": {
              "$oid": "5f1892ec296c81742a6a3e4b"
            }
          }
        ]


Get a document
---------------
If we know the "_id" of a created document, we can ask for it directly.

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" $BASE_URL/v3/meta/MyTstDB/MyCollection/5f1892ece37f7b5a692285e9

The response will be a json document from MyCollection with the "_id" of 5f1892ece37f7b5a692285e9 :

.. container:: foldable

     .. code-block:: json

        {
          "_id": {
            "$oid": "5f1892ece37f7b5a692285e9"
          },
          "name": "test document slt 7.21.2020-14:25",
          "jimmyList": [
            "1",
            "3"
          ],
          "description": "new whatever",
          "_etag": {
            "$oid": "5f1892ec296c81742a6a3e4b"
          }
        }

Find a document
---------------
We can pass a query parameter named "filter" and set the value to a json MongoDB query document. Let's find a document by a specific "name".

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json" -H "X-Tapis-Token:$jwt" --data-urlencode filter='{"name": "test document slt 7.21.2020-14:25"}' $BASE_URL/v3/meta/MyTstDB/MyCollection

The response will be an array of json documents from MyCollection :

.. container:: foldable

     .. code-block:: json

        [
          {
            "_id": {
              "$oid": "5f1892ece37f7b5a692285e9"
            },
            "name": "test document slt 7.21.2020-14:25",
            "jimmyList": [
              "1",
              "3"
            ],
            "description": "new whatever",
            "_etag": {
              "$oid": "5f1892ec296c81742a6a3e4b"
            }
          }
        ]


---------
Resources
---------
Root resources
--------------
The Root resource space represents the root namespace for databases on the MongoDb host. All databases are located here.
Requests to this space are limited to READ only for tenant administrators.

**List DB Names**

A request to the Root resource will list Database names found on the server. This request has been limited to those users with tenant administrative roles.

With pySDK operation:

.. code-block:: plaintext

        $ t.meta.listDBNames()

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" $BASE_URL/v3/meta/

The response will a json list of database names:

.. container:: foldable

     .. code-block:: json

        [
            "StreamsDevDB",
            "v1airr"
        ]

Database resources
------------------
The Database resource is the top level for many tenant projects. The resource maps directly to a MongoDb named database in the database server.
Case matters for matching the name of the database and must be specified when making requests for collections or documents. Currently

**List Collection Names**

This request will return a list of collection names from the specified database {db}. The permissions for access to the
database are set prior to access.

With pySDK operation:

.. code-block:: plaintext

        $ t.meta.listCollectionNames

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/{db}

The response will look something like the following:

.. container:: foldable

     .. code-block:: json

        [
          "streams_alerts_metadata",
          "streams_channel_metadata",
          "streams_instrument_index",
          "streams_project_metadata",
          "streams_templates_metadata",
          "tapisKapa-local"
        ]


**Get DB Metadata**

This request will return the metadata properties associated with the database. The core server generates an etag in the _properties collection for a database
that is necessary for future deletion.

With pySDK operation:

.. code-block:: plaintext

        $ t.meta.getDBMetadata()

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/{db}/_meta

The response will look something like the following:

.. container:: foldable

     .. code-block:: json

        {
           "_id": "_meta",
           "_etag": { "$oid": "5ef6232b296c81742a6a3e02" }
        }



**Create DB**

TODO: this implementation is not exposed. Creation of a database by tenant administrators is scheduled for inclusion in
an administrative interface API in a future release.

This request will create a new named database in the MongoDb root space by a tenant or service administrator.

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X PUT -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/{db}

The response will look something like the following:

.. container:: foldable

     .. code-block:: json

        { }


**Delete DB**
TODO: this implementation is not exposed. Deletion of a database by tenant administrators is scheduled for inclusion in
an administrative interface API in a future release.

This request will delete a named database in the MongoDb root space by a tenant or service administrator.


With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X DELETE -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/{db}

The response will look something like the following:

.. container:: foldable

     .. code-block:: json

     { }


Collection Resources
--------------------
The Collection resource allows requests for managing and querying json documents within a MongoDB collection.

**Create Collection**

You can create a new collection of documents by specifying a collection name under a specific database. /v3/meta/{db}/{collection}

With pySDK operation:

.. code-block:: plaintext

        $ t.meta.createCollection()

With CURL:

.. code-block:: plaintext

        $ curl -v -X PUT -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" $BASE_URL/v3/meta/{db}/{collection}

The response will look something like the following:

.. container:: foldable

     .. code-block:: json

        { }

**List Documents**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X GET -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/{db}/{collection}

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Delete Collection**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Get Collection Size**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json



**Get Collection Metadata**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


Document Resources
------------------
TODO introduction for Document resource.

**Create Document**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Get Document**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Replace Document**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Modify Document**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Delete Document**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


Index Resources
---------------
TODO introduction for Index resource.

**List Indexes**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Create Index**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Delete Index**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


Aggregation Resources
---------------------
TODO introduction for Document resource.


**Execute Aggregation**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Create Aggregation**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json


**Delete Aggregation**

With pySDK operation:

.. code-block:: plaintext

        $ t.meta

With CURL:

.. code-block:: plaintext

        $ curl -v -X POST -H "Content-Type:application/json"  -H "X-Tapis-Token:$jwt" -d '' $BASE_URL/v3/meta/

The response will look something like the following:

.. container:: foldable

     .. code-block:: json